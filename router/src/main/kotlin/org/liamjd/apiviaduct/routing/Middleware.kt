package org.liamjd.apiviaduct.routing

import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent

/**
 * Interface for middleware components that can process requests and responses
 * Middlewares are executed in the order they are registered
 */
interface Middleware {
    /**
     * Process the request before it reaches the handler
     * @param request The AWS API Gateway request event
     * @return The possibly modified request event
     */
    fun processRequest(request: APIGatewayProxyRequestEvent): APIGatewayProxyRequestEvent

    /**
     * Process the response after it has been generated by the handler
     * @param response The response generated by the handler
     * @param request The original request that generated this response
     * @return The possibly modified response
     */
    fun <T : Any> processResponse(response: Response<T>, request: APIGatewayProxyRequestEvent): Response<T>
}

/**
 * A simple logging middleware that logs requests and responses
 */
class LoggingMiddleware : Middleware {
    override fun processRequest(request: APIGatewayProxyRequestEvent): APIGatewayProxyRequestEvent {
        println("[LoggingMiddleware] Processing request: ${request.httpMethod} ${request.path}")
        return request
    }

    override fun <T : Any> processResponse(response: Response<T>, request: APIGatewayProxyRequestEvent): Response<T> {
        println("[LoggingMiddleware] Processing response: ${response.statusCode} for ${request.httpMethod} ${request.path}")
        return response
    }
}